// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Maps.Search.Models
{
    public partial class MapsAddress
    {
        internal static MapsAddress DeserializeMapsAddress(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> addressLine = default;
            Optional<string> locality = default;
            Optional<string> neighborhood = default;
            Optional<IReadOnlyList<AddressAdminDistrictsItem>> adminDistricts = default;
            Optional<string> postalCode = default;
            Optional<AddressCountryRegion> countryRegion = default;
            Optional<string> formattedAddress = default;
            Optional<Intersection> intersection = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("addressLine"u8))
                {
                    addressLine = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("locality"u8))
                {
                    locality = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("neighborhood"u8))
                {
                    neighborhood = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("adminDistricts"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<AddressAdminDistrictsItem> array = new List<AddressAdminDistrictsItem>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(AddressAdminDistrictsItem.DeserializeAddressAdminDistrictsItem(item));
                    }
                    adminDistricts = array;
                    continue;
                }
                if (property.NameEquals("postalCode"u8))
                {
                    postalCode = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("countryRegion"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    countryRegion = AddressCountryRegion.DeserializeAddressCountryRegion(property.Value);
                    continue;
                }
                if (property.NameEquals("formattedAddress"u8))
                {
                    formattedAddress = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("intersection"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    intersection = Intersection.DeserializeIntersection(property.Value);
                    continue;
                }
            }
            return new MapsAddress(addressLine.Value, locality.Value, neighborhood.Value, Optional.ToList(adminDistricts), postalCode.Value, countryRegion.Value, formattedAddress.Value, intersection.Value);
        }
    }
}
