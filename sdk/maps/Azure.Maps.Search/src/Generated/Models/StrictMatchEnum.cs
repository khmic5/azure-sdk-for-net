// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Maps.Search.Models
{
    /// <summary>
    /// Restrict the geocoding result to the country or region that is specified in the countryRegion field and the state, province or territory specified in the adminDistrict field.
    ///
    /// **If query is given, should not use this parameter.**
    /// </summary>
    public readonly partial struct StrictMatchEnum : IEquatable<StrictMatchEnum>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="StrictMatchEnum"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public StrictMatchEnum(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string NotstrictValue = "notstrict";
        private const string StrictValue = "strict";

        /// <summary> Do not restrict results to the specified countryRegion and adminDistrict. </summary>
        public static StrictMatchEnum Notstrict { get; } = new StrictMatchEnum(NotstrictValue);
        /// <summary> Restrict results to the specified countryRegion and adminDistrict. </summary>
        public static StrictMatchEnum Strict { get; } = new StrictMatchEnum(StrictValue);
        /// <summary> Determines if two <see cref="StrictMatchEnum"/> values are the same. </summary>
        public static bool operator ==(StrictMatchEnum left, StrictMatchEnum right) => left.Equals(right);
        /// <summary> Determines if two <see cref="StrictMatchEnum"/> values are not the same. </summary>
        public static bool operator !=(StrictMatchEnum left, StrictMatchEnum right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="StrictMatchEnum"/>. </summary>
        public static implicit operator StrictMatchEnum(string value) => new StrictMatchEnum(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is StrictMatchEnum other && Equals(other);
        /// <inheritdoc />
        public bool Equals(StrictMatchEnum other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
