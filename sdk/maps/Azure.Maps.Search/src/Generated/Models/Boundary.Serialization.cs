// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Maps.Search.Models
{
    public partial class Boundary
    {
        internal static Boundary DeserializeBoundary(JsonElement element)
        {
            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            Optional<string> name = default;
            Optional<string> copyright = default;
            Optional<string> copyrightURL = default;
            Optional<IReadOnlyList<GeometryCopyright>> geometriesCopyright = default;
            GeoJsonGeometry geometry = default;
            Optional<object> properties = default;
            Optional<string> id = default;
            Optional<string> featureType = default;
            GeoJsonObjectType type = default;
            Optional<IReadOnlyList<double>> bbox = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("name"u8))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("copyright"u8))
                {
                    copyright = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("copyrightURL"u8))
                {
                    copyrightURL = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("geometriesCopyright"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<GeometryCopyright> array = new List<GeometryCopyright>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(GeometryCopyright.DeserializeGeometryCopyright(item));
                    }
                    geometriesCopyright = array;
                    continue;
                }
                if (property.NameEquals("geometry"u8))
                {
                    geometry = GeoJsonGeometry.DeserializeGeoJsonGeometry(property.Value);
                    continue;
                }
                if (property.NameEquals("properties"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    properties = property.Value.GetObject();
                    continue;
                }
                if (property.NameEquals("id"u8))
                {
                    id = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("featureType"u8))
                {
                    featureType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("type"u8))
                {
                    type = property.Value.GetString().ToGeoJsonObjectType();
                    continue;
                }
                if (property.NameEquals("bbox"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    List<double> array = new List<double>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(item.GetDouble());
                    }
                    bbox = array;
                    continue;
                }
            }
            return new Boundary(type, Optional.ToList(bbox), geometry, properties.Value, id.Value, featureType.Value, name.Value, copyright.Value, copyrightURL.Value, Optional.ToList(geometriesCopyright));
        }
    }
}
